services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
    container_name: lego-php
    networks:
      - lego-network
    user: "${UID:-1000}:${GID:-1000}"

  webserver:
    image: nginx:alpine
    volumes:
      - .:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    container_name: lego-nginx 
    networks:
      - lego-network

  db:
    image: postgres:latest
    container_name: lego-postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-lego-postgresql-db}
      POSTGRES_USER: ${DB_USERNAME:-lego}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-1224}
      POSTGRES_MULTIPLE_DATABASES: "${N8N_DB_DATABASE:-n8n}"
    volumes:
      - lego-postgres-db-data:/var/lib/postgresql/data
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - lego-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-lego}"]
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4
    container_name: lego-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-8081}:80"
    networks:
      - lego-network

  mongodb:
    image: mongo
    container_name: lego-mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME:-lego}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD:-1224}
    ports:
      - "${MONGO_DB_PORT:-27017}:27017"
    volumes:
      - lego-mongo-data:/data/db
    networks:
      - lego-network

  redis:
    image: redis:alpine
    container_name: lego-redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-1224}"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-1224}
      REDIS_USER: ${REDIS_USER:-lego}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - lego-network
    volumes:
      - lego-redis-data:/data

  n8n:
    profiles: ["n8n"]
    image: n8nio/n8n:latest
    container_name: lego-n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - N8N_HOST=${DOMAIN_NAME:-domain.example.com}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - NODE_ENV=${NODE_ENV:-production}
      - WEBHOOK_URL=https://${DOMAIN_NAME:-domain.example.com}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_DISABLE_X_FRAME_OPTIONS=true
      
    labels:
      - traefik.http.middlewares.n8n-gzip.compress=true
      - traefik.http.middlewares.n8n-gzip.compress.excludedcontenttypes=text/event-stream
      - traefik.http.routers.n8n-https.rule=Host(`${N8N_HOST:-domain.example.com}`)
      - traefik.http.routers.n8n-https.middlewares=n8n-gzip@docker
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - lego-network
    depends_on:
      db:
        condition: service_healthy

  init-permissions:
    image: alpine
    volumes:
      - .:/var/www/html
    command: sh -c "chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache && chown -R www-data:www-data /var/www/html"
    depends_on:
      - app

networks:
  lego-network:

volumes:
  lego-postgres-db-data:
  lego-mongo-data:
  lego-redis-data:
  n8n-data:
